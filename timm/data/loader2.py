from timm.data.loader import fast_collate, create_transform

from datapipe import create_datapipe
from torch.utils.data import default_collate
from torchdata.datapipes.iter import IterDataPipe
from torchdata.dataloader2 import DataLoader2
from torchdata.dataloader2.reading_service import (
    DistributedReadingService,
    MultiProcessingReadingService,
    SequentialReadingService,
)
from typing import Callable


def create_loader2(
        datapipe: IterDataPipe,
        batch_size: int,
        img_transform: Callable = None,  # Generated by create transform
        collate_fn: Callable = None,
        pin_memory: bool = False,
        num_workers: int = 0,
        use_prefetcher: bool = True,  # Enabled by MultiProcessingReadingService by default
        distributed: bool = False,
   ):
    r"""
    Return `DataLoader2` with proper `ReadingService` settings after applying transform, batching, collation
    to samples from `datapipe`.

    Colab example:
    https://colab.research.google.com/drive/1eSvp-eUDYPj0Sd0X_Mv9s9VkE8RNDg1u#scrollTo=Xnv9gwsabigV
    """
    if img_transform is not None:
        datapipe = datapipe.map(img_transform, input_col=0) #'.jpg')
    datapipe = datapipe.batch(batch_size)
    if collate_fn is None:
        collate_fn = fast_collate if use_prefetcher else default_collate
        datapipe = datapipe.collate(collate_fn=collate_fn)
    if pin_memory:
        datapipe = datapipe.pin_memory()

    prefetch_cnt = {} if use_prefetcher else {"worker_prefetch_cnt": 0, "main_prefetch_cnt": 0}
    mp_rs = MultiProcessingReadingService(num_workers=num_workers, **prefetch_cnt)

    if distributed:
        dist_rs = DistributedReadingService()
        rs = SequentialReadingService(dist_rs, mp_rs)
    else:
        rs = mp_rs

    return DataLoader2(datapipe, reading_service=rs)


if __name__ == "__main__":
    root = "."
    dp = create_datapipe(name="ImageNet", root=root, split="valid")
    transform = create_transform(input_size=(3, 224, 224))
    dl = create_loader2(dp, batch_size=2, num_workers=2, img_transform=transform)
    for batch in dl:
        print(batch)
